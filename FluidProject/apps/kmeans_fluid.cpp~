#include "kmeans.h"
//Haibo, Huaipan

#include "kmeans_fluid.h"
using RgbImage = example::RgbImage;
using Clusters = example::Clusters;
using namespace example;
std::string Kmeans::loopindicator = "0";
void KmeansSchemeFluidExtreme::segmentImage(RgbImage* image, Clusters* clusters, int n) {

	auto tf = new TaskFactory();
	auto gs = new AggressiveGS(12);
	auto tp0 = tf->newTask<void(*)(void *), void *>("Begin", &nullfun, NULL);
	auto tp0status = new __fluid__<bool>(tp0->isfinished());
	auto v0 = new ValveEQ<bool>(tp0status, true);

	auto tp3 = tf->newTask<void(*)(void *), void *>("Begin", &nullfun, NULL);
	auto tp3status = new __fluid__<bool>(tp3->isfinished());
	auto v3 = new ValveEQ<bool>(tp3status, true);

	tp0->run();
	tp3->run();

	double  rate = 1;

	for (int i = 0; i < n; ++i) {
		int* counter = new int(0);
		auto tpb1 = std::bind(&KmeansRandom::AssignCluster, this, image, clusters, std::placeholders::_1);
		auto tp1 = tf->newTask<decltype(tpb1), int*>("AssignCluster" + std::to_string(i), tpb1, counter);
		Guard* g1 = gs->newGuard("GuardAssignCluster" + std::to_string(i), { }, tp1, {});

		auto tp1status = new __fluid__<int>(counter);

		if (rate <= 0.05) rate = 0.05;

		auto v1 = new ValveGT<int>(tp1status, image->h*image->w*rate);

		auto tpb2 = std::bind(&KmeansRandom::Recenter, this, image, clusters);
		auto tp2 = tf->newTask<decltype(tpb2)>("Recenter" + std::to_string(i), tpb2);
		Guard*       g2 = gs->newGuard("GuardRecenter" + std::to_string(i), {  }, tp2, { g1 });

		tp0status = new __fluid__<bool>(tp2->isfinished());
		v0 = new ValveEQ<bool>(tp0status, true);
		tp3status = new __fluid__<bool>(tp1->isfinished());
		v3 = new ValveEQ<bool>(tp3status, true);
		rate = rate - i *0.025;
	}

	tp3 = tf->newTask<void(*)(void *), void *>("End", &nullfun, NULL);
	tp3status = new __fluid__<bool>(tp3->parent->isfinished());
	v3 = new ValveEQ<bool>(tp3status, true);
	//while (*(tp3->parent->isfinished()) == false)
	//	; // HARD HACK!
	gs->sync(tp3);
	for (int y = 0; y < image->h; y++) {
		for (int x = 0; x < image->w; x++) {
			image->pixels[y][x].r = clusters->centroids[image->pixels[y][x].cluster].r;
			image->pixels[y][x].g = clusters->centroids[image->pixels[y][x].cluster].g;
			image->pixels[y][x].b = clusters->centroids[image->pixels[y][x].cluster].b;
		}
	}
}



void KmeansSchemeFluidXI::segmentImage(RgbImage* image, Clusters* clusters, int n) {

	auto tf = new TaskFactory();
	auto gs = new AggressiveGS(2);
	auto tp0 = tf->newTask<void(*)(void *), void *>("Begin", &nullfun, NULL);
	auto tp0status = new __fluid__<bool>(tp0->isfinished());
	auto v0 = new ValveEQ<bool>(tp0status, true);

	auto tp3 = tf->newTask<void(*)(void *), void *>("Begin", &nullfun, NULL);
	auto tp3status = new __fluid__<bool>(tp3->isfinished());
	auto v3 = new ValveEQ<bool>(tp3status, true);

	tp0->run();
	tp3->run();

	double  rate = 1;

	for (int i = 0; i < n; ++i) {
		int* counter = new int(0);
		auto tpb1 = std::bind(&KmeansRandom::AssignCluster, this, image, clusters, std::placeholders::_1);
		auto tp1 = tf->newTask<decltype(tpb1), int*>("AssignCluster" + std::to_string(i), tpb1, counter);
		Guard* g1 = gs->newGuard("GuardAssignCluster" + std::to_string(i), { v0, v3 }, tp1, {});

		auto tp1status = new __fluid__<int>(counter);

		if (rate <= 0.05) rate = 0.05;

		auto v1 = new ValveGT<int>(tp1status, image->h*image->w*rate);

		auto tpb2 = std::bind(&KmeansRandom::Recenter, this, image, clusters);
		auto tp2 = tf->newTask<decltype(tpb2)>("Recenter" + std::to_string(i), tpb2);
		Guard*       g2 = gs->newGuard("GuardRecenter" + std::to_string(i), { v1 }, tp2, { g1 });

		tp0status = new __fluid__<bool>(tp2->isfinished());
		v0 = new ValveEQ<bool>(tp0status, true);
		tp3status = new __fluid__<bool>(tp1->isfinished());
		v3 = new ValveEQ<bool>(tp3status, true);
		rate = rate - i *0.025;
	}

	tp3 = tf->newTask<void(*)(void *), void *>("End", &nullfun, NULL);
	tp3status = new __fluid__<bool>(tp3->parent->isfinished());
	v3 = new ValveEQ<bool>(tp3status, true);
	while (*(tp3->parent->isfinished()) == false)
		; // HARD HACK!

	for (int y = 0; y < image->h; y++) {
		for (int x = 0; x < image->w; x++) {
			image->pixels[y][x].r = clusters->centroids[image->pixels[y][x].cluster].r;
			image->pixels[y][x].g = clusters->centroids[image->pixels[y][x].cluster].g;
			image->pixels[y][x].b = clusters->centroids[image->pixels[y][x].cluster].b;
		}
	}
}
void KmeansSchemeFluidPause::segmentImage(RgbImage* image, Clusters* clusters, int n) {

	auto tf = new TaskFactory();
	auto gs = new AggressiveGSPause(8);
	auto tp0 = tf->newTask<void(*)(void *), void *>("Begin", &nullfun, NULL);
	auto tp0status = new __fluid__<bool>(tp0->isfinished());
	auto v0 = new ValveEQ<bool>(tp0status, true);

	tp0->run();

	double  rate = 1;

	for (int i = 0; i < n; ++i) {
		loopindicator = "loop" + std::to_string(i);
		int* counter = new int(0);
		auto tpb1 = std::bind(&KmeansRandom::AssignCluster, this, image, clusters, std::placeholders::_1);
		auto tp1 = tf->newTask<decltype(tpb1), int*>("AssignCluster" + std::to_string(i), tpb1, counter);
		Guard* g1 = gs->newGuard("GuardAssignCluster" + std::to_string(i), {/*v0*/ }, tp1, {});

		auto tp1status = new __fluid__<int>(counter);
		//if (i < 10) rate = 1;
		if (rate <= 0.05) rate = 0.05;

		auto v1 = new ValveGT<int>(tp1status, image->h*image->w*rate);

		auto tpb2 = std::bind(&KmeansRandom::Recenter, this, image, clusters);
		auto tp2 = tf->newTask<decltype(tpb2)>("Recenter" + std::to_string(i), tpb2);
		Guard*       g2 = gs->newGuard("GuardRecenter" + std::to_string(i), { v1 }, tp2, { g1 });

		gs->iSync();
		//tp0status = new __fluid__<bool>(tp2->isfinished());
		//v0 = new ValveEQ<bool>(tp0status, true);
		rate = rate - i *1.0/n;
	}

	auto tp3 = tf->newTask<void(*)(void *), void *>("End", &nullfun, NULL);
	auto tp3status = new __fluid__<bool>(tp3->parent->isfinished());
	auto v3 = new ValveEQ<bool>(tp3status, true);
	//while (*(tp3->parent->isfinished()) == false)
	//	; // HARD HACK!
	gs->sync(tp3);
	double sum = 0;
	for (int y = 0; y < image->h; y++) {
		for (int x = 0; x < image->w; x++) {
			sum += (pow(image->pixels[y][x].r - clusters->centroids[image->pixels[y][x].cluster].r, 2) +
				pow(image->pixels[y][x].g - clusters->centroids[image->pixels[y][x].cluster].g, 2) +
				pow(image->pixels[y][x].b - clusters->centroids[image->pixels[y][x].cluster].b, 2));
		}
	}
	SyncLogger::print("DIST: ", sum);
	
	for (int y = 0; y < image->h; y++) {
		for (int x = 0; x < image->w; x++) {
			image->pixels[y][x].r = clusters->centroids[image->pixels[y][x].cluster].r;
			image->pixels[y][x].g = clusters->centroids[image->pixels[y][x].cluster].g;
			image->pixels[y][x].b = clusters->centroids[image->pixels[y][x].cluster].b;
		}
	}
}
void KmeansSchemeFluidX::segmentImage(RgbImage* image, Clusters* clusters, int n) {

	auto tf = new TaskFactory();
	auto gs = new AggressiveGS(2);
	auto tp0 = tf->newTask<void(*)(void *), void *>("Begin", &nullfun, NULL);
	auto tp0status = new __fluid__<bool>(tp0->isfinished());
	auto v0 = new ValveEQ<bool>(tp0status, true);

	tp0->run();

	double  rate = 1;
	SyncLogger::print("=====KmeansSchemeFluidX=====");

	for (int i = 0; i < n; ++i) {
		loopindicator = "loop" + std::to_string(i);
		int* counter = new int(0);
		auto tpb1 = std::bind(&KmeansRandom::AssignCluster, this, image, clusters, std::placeholders::_1);
		auto tp1 = tf->newTask<decltype(tpb1), int*>("AssignCluster" + std::to_string(i), tpb1, counter);
		Guard* g1 = gs->newGuard("GuardAssignCluster" + std::to_string(i), { /*v0*/ }, tp1, {});

		auto tp1status = new __fluid__<int>(counter);

		//if (i < 10) rate = 1;
		if (rate <= 0.05) rate = 0.05;

		auto v1 = new ValveGT<int>(tp1status, image->h*image->w*rate);

		auto tpb2 = std::bind(&KmeansRandom::Recenter, this, image, clusters);
		auto tp2 = tf->newTask<decltype(tpb2)>("Recenter" + std::to_string(i), tpb2);
		Guard*       g2 = gs->newGuard("GuardRecenter" + std::to_string(i), { v1 }, tp2, { g1 });
		gs->iSync();
		//tp0status = new __fluid__<bool>(tp2->isfinished());
		//v0 = new ValveEQ<bool>(tp0status, true);
		rate = rate - i  *1.0 / n;
	}

	auto tp3 = tf->newTask<void(*)(void *), void *>("End", &nullfun, NULL);
	auto tp3status = new __fluid__<bool>(tp3->parent->isfinished());
	auto v3 = new ValveEQ<bool>(tp3status, true);
	//while (*(tp3->parent->isfinished()) == false)
	//	; // HARD HACK!
	gs->sync(tp3);

	double sum = 0;
	for (int y = 0; y < image->h; y++) {
		for (int x = 0; x < image->w; x++) {
			sum += (pow(image->pixels[y][x].r - clusters->centroids[image->pixels[y][x].cluster].r, 2) +
				pow(image->pixels[y][x].g - clusters->centroids[image->pixels[y][x].cluster].g, 2) +
				pow(image->pixels[y][x].b - clusters->centroids[image->pixels[y][x].cluster].b, 2));
		}
	}
	SyncLogger::print("DIST: ", sum);

	for (int y = 0; y < image->h; y++) {
		for (int x = 0; x < image->w; x++) {
			image->pixels[y][x].r = clusters->centroids[image->pixels[y][x].cluster].r;
			image->pixels[y][x].g = clusters->centroids[image->pixels[y][x].cluster].g;
			image->pixels[y][x].b = clusters->centroids[image->pixels[y][x].cluster].b;
		}
	}
}
void KmeansSchemeFluidX2::segmentImage(RgbImage* image, Clusters* clusters, int n) {

	auto tf = new TaskFactory();
	auto gs = new AggressiveGS(8);
	auto tp0 = tf->newTask<void(*)(void *), void *>("Begin", &nullfun, NULL);
	auto tp0status = new __fluid__<bool>(tp0->isfinished());
	auto v0 = new ValveEQ<bool>(tp0status, true);

	tp0->run();

	double  rate = 1;
	SyncLogger::print("=====KmeansSchemeFluidX2 thread_num:%d=====", this->thread_num);

	for (int i = 0; i < n; ++i) {
		loopindicator = "loop" + std::to_string(i);
		//int* counter = new int(0);
		std::vector<int>* counter = new std::vector<int>;
		counter->push_back(0);
		counter->insert(counter->begin(), this->thread_num-1, 0);
		//printf("counter size: %d!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n",counter->size());
		auto tpb1 = std::bind(&KmeansRandom::AssignCluster2, this, image, clusters, std::placeholders::_1);
		auto tp1 = tf->newTask<decltype(tpb1), std::vector<int>*>("AssignCluster" + std::to_string(i), tpb1, counter);
		Guard* g1 = gs->newGuard("GuardAssignCluster" + std::to_string(i), { v0 }, tp1, {});

		auto tp1status = new __fluid__<std::vector<int>>(counter);

		//if (i < 10) rate = 1;
		if (rate <= 0.05) rate = 0.05;

		auto v1 = new ValveGT_vec<int>(tp1status, image->h*image->w*rate);

		//auto tpb2 = std::bind(&KmeansRandom::Recenter2, this, image, clusters, this->thread_num);
		//auto tpb2 = std::bind(&KmeansRandom::Recenter2, this, image, clusters, this->thread_num);
		auto tpb2 = std::bind(&KmeansRandom::Recenter, this, image, clusters);
		auto tp2 = tf->newTask<decltype(tpb2)>("Recenter" + std::to_string(i), tpb2);
		Guard*       g2 = gs->newGuard("GuardRecenter" + std::to_string(i), { v1 }, tp2, { g1 });
		gs->iSync();
		tp0status = new __fluid__<bool>(tp2->isfinished());
		v0 = new ValveEQ<bool>(tp0status, true);
		rate = rate - i  *1.0 / n;
	}

	auto tp3 = tf->newTask<void(*)(void *), void *>("End", &nullfun, NULL);
	auto tp3status = new __fluid__<bool>(tp3->parent->isfinished());
	auto v3 = new ValveEQ<bool>(tp3status, true);
	//while (*(tp3->parent->isfinished()) == false)
	//	; // HARD HACK!
	gs->sync(tp3);

	double sum = 0;
	for (int y = 0; y < image->h; y++) {
		for (int x = 0; x < image->w; x++) {
			sum += (pow(image->pixels[y][x].r - clusters->centroids[image->pixels[y][x].cluster].r, 2) +
				pow(image->pixels[y][x].g - clusters->centroids[image->pixels[y][x].cluster].g, 2) +
				pow(image->pixels[y][x].b - clusters->centroids[image->pixels[y][x].cluster].b, 2));
		}
	}
	SyncLogger::print("DIST: ", sum);

	for (int y = 0; y < image->h; y++) {
		for (int x = 0; x < image->w; x++) {
			image->pixels[y][x].r = clusters->centroids[image->pixels[y][x].cluster].r;
			image->pixels[y][x].g = clusters->centroids[image->pixels[y][x].cluster].g;
			image->pixels[y][x].b = clusters->centroids[image->pixels[y][x].cluster].b;
		}
	}
}

void KmeansSchemePPL::segmentImage(RgbImage* image, Clusters* clusters, int n) {
	TaskFactory tf;
	AggressiveGS gs(1);
	auto tp0 = tf.newTask<void(*)(void *), void *>("Begin", &nullfun, NULL);
	auto tp0status = new __fluid__<bool>(tp0->isfinished());
	auto v0 = new ValveEQ<bool>(tp0status, true);

	tp0->run();

	for (int i = 0; i < n; ++i) {
		int* counter = new int(0);
		auto tpb1 = std::bind(&KmeansRandom::AssignCluster, this, image, clusters, counter);
		auto tp1 = tf.newTask<decltype(tpb1)>("AssignCluster" + std::to_string(i), tpb1);
		Guard* g1 = gs.newGuard("GuardAssignCluster" + std::to_string(i), { v0 }, tp1, {});

		auto tp1status = new __fluid__<bool>(tp1->isfinished());
		auto v1 = new ValveEQ<bool>(tp1status, true);
		
		auto tpb2 = std::bind(&KmeansRandom::Recenter, this, image, clusters);
		auto tp2 = tf.newTask<decltype(tpb2)>("Recenter" + std::to_string(i), tpb2);
		Guard*       g2 = gs.newGuard("GuardRecenter" + std::to_string(i), { v1 }, tp2, { g1 });

		tp0status = new __fluid__<bool>(tp2->isfinished());
		v0 = new ValveEQ<bool>(tp0status, true);
		//AssignCluster(image, clusters);
		//Recenter(image, clusters);
	}

	auto tp3 = tf.newTask<void(*)(void *), void *>("End", &nullfun, NULL);
	auto tp3status = new __fluid__<bool>(tp3->parent->isfinished());
	auto v3 = new ValveEQ<bool>(tp3status, true);
	//Guard*       g3 = new Guard("EndGuard" , { v3 }, tp3, {});
	while (*(tp3->parent->isfinished()) == false)
		; // HARD HACK!

		  //std::this_thread::sleep_for(std::chrono::seconds(20));
		  //delete g1, g2;
	for (int y = 0; y < image->h; y++) {
		for (int x = 0; x < image->w; x++) {
			image->pixels[y][x].r = clusters->centroids[image->pixels[y][x].cluster].r;
			image->pixels[y][x].g = clusters->centroids[image->pixels[y][x].cluster].g;
			image->pixels[y][x].b = clusters->centroids[image->pixels[y][x].cluster].b;
		}
	}
}
